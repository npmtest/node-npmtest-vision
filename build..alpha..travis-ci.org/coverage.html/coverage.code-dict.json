{"/home/travis/build/npmtest/node-npmtest-vision/test.js":"/* istanbul instrument in package npmtest_vision */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - init-after\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - init-after\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - init-after\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-vision/lib.npmtest_vision.js":"/* istanbul instrument in package npmtest_vision */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_vision = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_vision = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-vision/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-vision && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_vision */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_vision\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // init-after\n    // run browser js-env code - init-after\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - init-after\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_vision.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_vision.rollup.js'] =\n            local.assetsDict['/assets.npmtest_vision.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_vision.__dirname + '/lib.npmtest_vision.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-vision/node_modules/vision/lib/index.js":"'use strict';\n// Load modules\n\nconst Hoek = require('hoek');\nconst Joi = require('joi');\nconst Manager = require('./manager');\n// Additional helper modules required in constructor\n\n\n// Declare internals\n\nconst internals = {};\n\n\ninternals.schema = Joi.alternatives([\n    Joi.string(),\n    Joi.object({\n        template: Joi.string(),\n        context: Joi.object(),\n        options: Joi.object()\n    })\n]);\n\n\nexports.register = function (server, pluginOptions, next) {\n\n    server.decorate('server', 'views', function (options) {\n\n        Hoek.assert(options, 'Missing views options');\n        this.realm.plugins.vision = this.realm.plugins.vision || {};\n        Hoek.assert(!this.realm.plugins.vision.manager, 'Cannot set views manager more than once');\n\n        if (!options.relativeTo &&\n            this.realm.settings.files.relativeTo) {\n\n            options = Hoek.shallow(options);\n            options.relativeTo = this.realm.settings.files.relativeTo;\n        }\n\n        const manager = new Manager(options);\n        this.realm.plugins.vision.manager = manager;\n        return manager;\n    });\n\n    server.decorate('server', 'render', internals.render);\n    server.decorate('request', 'render', internals.render);\n\n    server.handler('view', internals.handler);\n\n    server.decorate('reply', 'view', function (template, context, options) {\n\n        const realm = (this.realm.plugins.vision || this.request.server.realm.plugins.vision || {});\n        Hoek.assert(realm.manager, 'Cannot render view without a views manager configured');\n        return this.response(realm.manager._response(template, context, options, this.request));\n    });\n\n    return next();\n};\n\nexports.register.attributes = {\n    connections: false,\n    once: true,\n    pkg: require('../package.json')\n};\n\n\ninternals.render = function (template, context, options, callback) {\n\n    if (!callback && typeof options === 'function') {\n        callback = options;\n        options = {};\n    }\n\n    const isServer = (typeof this.route === 'function');\n    const server = (isServer ? this : this.server);\n    const vision = ((!isServer ? this.route.realm.plugins.vision : null) || server.realm.plugins.vision || server.root.realm.plugins.vision || {});\n    Hoek.assert(vision.manager, 'Missing views manager');\n    return vision.manager.render(template, context, options, callback);\n};\n\n\ninternals.handler = function (route, options) {\n\n    Joi.assert(options, internals.schema, 'Invalid view handler options (' + route.path + ')');\n\n    if (typeof options === 'string') {\n        options = { template: options };\n    }\n\n    const settings = {                                                // Shallow copy to allow making dynamic changes to context\n        template: options.template,\n        context: options.context,\n        options: options.options\n    };\n\n    return function (request, reply) {\n\n        const context = {\n            params: request.params,\n            payload: request.payload,\n            query: request.query,\n            pre: request.pre\n        };\n\n        if (settings.context) {                                     // Shallow copy to avoid cloning unknown objects\n            const keys = Object.keys(settings.context);\n            for (let i = 0; i < keys.length; ++i) {\n                const key = keys[i];\n                context[key] = settings.context[key];\n            }\n        }\n\n        reply.view(settings.template, context, settings.options);\n    };\n};\n","/home/travis/build/npmtest/node-npmtest-vision/node_modules/vision/lib/manager.js":"'use strict';\n// Load modules\n\nconst Fs = require('fs');\nconst Path = require('path');\nconst Boom = require('boom');\nconst Hoek = require('hoek');\nconst Joi = require('joi');\nconst Items = require('items');\n// Additional helper modules required in constructor\n\n\n// Declare internals\n\nconst internals = {};\n\n\ninternals.defaults = {\n    // defaultExtension: '',\n    // path: '',\n    // relativeTo: '',\n    compileOptions: {},\n    runtimeOptions: {},\n    layout: false,\n    layoutKeyword: 'content',\n    encoding: 'utf8',\n    isCached: true,\n    allowAbsolutePaths: false,\n    allowInsecureAccess: false,\n    // partialsPath: '',\n    contentType: 'text/html',\n    compileMode: 'sync',\n    context: null\n};\n\n\ninternals.schema = {};\n\n\ninternals.schema.viewOverride = Joi.object({\n    path: [Joi.array().items(Joi.string()), Joi.string()],\n    relativeTo: Joi.string(),\n    compileOptions: Joi.object(),\n    runtimeOptions: Joi.object(),\n    layout: Joi.string().allow(false, true),\n    layoutKeyword: Joi.string(),\n    layoutPath: [Joi.array().items(Joi.string()), Joi.string()],\n    encoding: Joi.string(),\n    allowAbsolutePaths: Joi.boolean(),\n    allowInsecureAccess: Joi.boolean(),\n    contentType: Joi.string()\n});\n\n\ninternals.schema.viewBase = internals.schema.viewOverride.keys({\n    partialsPath: [Joi.array().items(Joi.string()), Joi.string()],\n    helpersPath: [Joi.array().items(Joi.string()), Joi.string()],\n    isCached: Joi.boolean(),\n    compileMode: Joi.string().valid('sync', 'async'),\n    defaultExtension: Joi.string()\n});\n\n\ninternals.schema.manager = internals.schema.viewBase.keys({\n    engines: Joi.object().required(),\n    context: [Joi.object(), Joi.func()]\n});\n\n\ninternals.schema.view = internals.schema.viewBase.keys({\n    module: Joi.object({\n        compile: Joi.func().required()\n    })\n        .options({ allowUnknown: true })\n        .required()\n});\n\n\nexports = module.exports = internals.Manager = function (options) {\n\n    Joi.assert(options, internals.schema.manager);\n\n    // Save non-defaults values\n\n    const engines = options.engines;\n    const defaultExtension = options.defaultExtension;\n\n    // Clone options\n\n    const defaults = Hoek.applyToDefaultsWithShallow(internals.defaults, options, ['engines', 'context']);\n    delete defaults.engines;\n    delete defaults.defaultExtension;\n\n    // Prepare manager state\n\n    const extensions = Object.keys(engines);\n    Hoek.assert(extensions.length, 'Views manager requires at least one registered extension handler');\n\n    this._context = defaults.context;\n    this._engines = {};\n    this._defaultExtension = defaultExtension || (extensions.length === 1 ? extensions[0] : '');\n\n    // Load engines\n\n    extensions.forEach((extension) => {\n\n        const config = engines[extension];\n        const engine = {};\n\n        if (config.compile &&\n            typeof config.compile === 'function') {\n\n            engine.module = config;\n            engine.config = defaults;\n        }\n        else {\n            Joi.assert(config, internals.schema.view);\n\n            engine.module = config.module;\n            engine.config = Hoek.applyToDefaultsWithShallow(defaults, config, ['module']);\n        }\n\n        engine.suffix = '.' + extension;\n        engine.compileFunc = engine.module.compile;\n\n        if (engine.config.compileMode === 'sync') {\n            engine.compileFunc = function (str, opt, next) {\n\n                let compiled = null;\n                try {\n                    compiled = engine.module.compile(str, opt);\n                }\n                catch (err) {\n                    return next(err);\n                }\n\n                const renderer = function (context, runtimeOptions, renderNext) {\n\n                    let rendered = null;\n                    try {\n                        rendered = compiled(context, runtimeOptions);\n                    }\n                    catch (err) {\n                        return renderNext(err);\n                    }\n\n                    return renderNext(null, rendered);\n                };\n\n                return next(null, renderer);\n            };\n        }\n\n        if (engine.config.isCached) {\n            engine.cache = {};\n        }\n\n        // When a prepare function is provided, state needs to be initialized before trying to compile and render\n        engine.ready = !(engine.module.prepare && typeof engine.module.prepare === 'function');\n\n        // Load partials and helpers\n\n        this._loadPartials(engine);\n        this._loadHelpers(engine);\n\n        // Set engine\n\n        this._engines[extension] = engine;\n    });\n};\n\n\ninternals.Manager.prototype._loadPartials = function (engine) {\n\n    if (!engine.config.partialsPath ||\n        !engine.module.registerPartial ||\n        typeof engine.module.registerPartial !== 'function') {\n\n        return;\n    }\n\n    const load = function () {\n\n        const partialsPaths = [].concat(engine.config.partialsPath);\n\n        partialsPaths.forEach((partialsPath) => {\n\n            const path = internals.path(engine.config.relativeTo, partialsPath);\n            const files = traverse(path);\n            files.forEach((file) => {\n\n                const offset = path.slice(-1) === Path.sep ? 0 : 1;\n                const name = file.slice(path.length + offset, -engine.suffix.length).replace(/\\\\/g, '/');\n                const src = Fs.readFileSync(file).toString(engine.config.encoding);\n                engine.module.registerPartial(name, src);\n            });\n        });\n    };\n\n    const traverse = function (path) {\n\n        let files = [];\n\n        Fs.readdirSync(path).forEach((file) => {\n\n            file = Path.join(path, file);\n            const stat = Fs.statSync(file);\n            if (stat.isDirectory()) {\n                files = files.concat(traverse(file));\n                return;\n            }\n\n            if (Path.basename(file)[0] !== '.' &&\n                Path.extname(file) === engine.suffix) {\n\n                files.push(file);\n            }\n        });\n\n        return files;\n    };\n\n    load();\n};\n\n\ninternals.Manager.prototype._loadHelpers = function (engine) {\n\n    if (!engine.config.helpersPath ||\n        !engine.module.registerHelper ||\n        typeof engine.module.registerHelper !== 'function') {\n\n        return;\n    }\n\n    const helpersPaths = [].concat(engine.config.helpersPath);\n\n    helpersPaths.forEach((helpersPath) => {\n\n        let path = internals.path(engine.config.relativeTo, helpersPath);\n        if (!Path.isAbsolute(path)) {\n            path = Path.join(process.cwd(), path);\n        }\n\n        Fs.readdirSync(path).forEach((file) => {\n\n            file = Path.join(path, file);\n            const stat = Fs.statSync(file);\n            if (!stat.isDirectory() &&\n                Path.basename(file)[0] !== '.') {\n\n                try {\n                    const helper = require(file);\n                    if (typeof helper === 'function') {\n                        const offset = path.slice(-1) === Path.sep ? 0 : 1;\n                        const name = file.slice(path.length + offset, -Path.extname(file).length);\n                        engine.module.registerHelper(name, helper);\n                    }\n                }\n                catch (err) {\n                    console.warn('WARNING: vision failed to load helper \\'%s\\': %s', file, err.message);\n                }\n            }\n        });\n    });\n};\n\n\ninternals.Manager.prototype.registerHelper = function (name, helper) {\n\n    Object.keys(this._engines).forEach((extension) => {\n\n        const engine = this._engines[extension];\n\n        if (typeof engine.module.registerHelper === 'function') {\n            engine.module.registerHelper(name, helper);\n        }\n    });\n};\n\n\ninternals.Manager.prototype.render = function (filename, context, options, callback) {\n\n    if (!callback) {\n        return internals._wrapMethod(this, this.render, [filename, context, options]);\n    }\n\n    this._prepare(filename, options, (err, compiled) => {\n\n        if (err) {\n            return callback(err);\n        }\n\n        this._render(compiled, context, null, (err, rendered) => {\n\n            if (err) {\n                return callback(err);\n            }\n\n            return callback(null, rendered, compiled.settings);\n        });\n    });\n};\n\n\ninternals.Manager.prototype._prepare = function (template, options, callback) {\n\n    options = options || {};\n\n    const fileExtension = Path.extname(template).slice(1);\n    const extension = fileExtension || this._defaultExtension;\n    if (!extension) {\n        return callback(Boom.badImplementation('Unknown extension and no defaultExtension configured for view template: ' + template));\n    }\n\n    const engine = this._engines[extension];\n    if (!engine) {\n        return callback(Boom.badImplementation('No view engine found for file: ' + template));\n    }\n\n    template = template + (fileExtension ? '' : engine.suffix);\n\n    // Engine is ready to render\n\n    if (engine.ready) {\n        return this._prepareTemplates(template, engine, options, callback);\n    }\n\n    // Engine needs initialization\n\n    return this._prepareEngine(engine, (err) => {\n\n        if (err) {\n            return callback(err);\n        }\n\n        return this._prepareTemplates(template, engine, options, callback);\n    });\n};\n\n\ninternals.Manager.prototype._prepareEngine = function (engine, next) {\n\n    // _prepareEngine can only be invoked when the prepare function is defined\n\n    try {\n        return engine.module.prepare(engine.config, (err) => {\n\n            if (err) {\n                return next(err);\n            }\n\n            engine.ready = true;\n            return next();\n        });\n    }\n    catch (err) {\n        return next(err);\n    }\n};\n\n\ninternals.Manager.prototype._prepareTemplates = function (template, engine, options, callback) {\n\n    const compiled = {\n        settings: Hoek.applyToDefaults(engine.config, options)\n    };\n\n    this._path(template, compiled.settings, false, (err, templatePath) => {\n\n        if (err) {\n            return callback(err);\n        }\n\n        this._compile(templatePath, engine, compiled.settings, (err, compiledTemplate) => {\n\n            if (err) {\n                return callback(err);\n            }\n\n            compiled.template = compiledTemplate;\n\n            // No layout\n\n            if (!compiled.settings.layout) {\n                return callback(null, compiled);\n            }\n\n            // With layout\n\n            this._path((compiled.settings.layout === true ? 'layout' : compiled.settings.layout) + engine.suffix, compiled.settings, true, (err, layoutPath) => {\n\n                if (err) {\n                    return callback(err);\n                }\n\n                this._compile(layoutPath, engine, compiled.settings, (err, layout) => {\n\n                    if (err) {\n                        return callback(err);\n                    }\n\n                    compiled.layout = layout;\n                    return callback(null, compiled);\n                });\n            });\n        });\n    });\n};\n\n\ninternals.Manager.prototype._path = function (template, settings, isLayout, next) {\n\n    // Validate path\n\n    const isAbsolutePath = Path.isAbsolute(template);\n    const isInsecurePath = template.match(/\\.\\.\\//g);\n\n    if (!settings.allowAbsolutePaths &&\n        isAbsolutePath) {\n\n        return next(Boom.badImplementation('Absolute paths are not allowed in views'));\n    }\n\n    if (!settings.allowInsecureAccess &&\n        isInsecurePath) {\n\n        return next(Boom.badImplementation('View paths cannot lookup templates outside root path (path includes one or more \\'../\\')'));\n    }\n\n    // Resolve path and extension\n\n    let paths;\n    if (isAbsolutePath) {\n        paths = [template];\n    }\n    else {\n        paths = [].concat((isLayout && settings.layoutPath) || settings.path);\n\n        for (let i = 0; i < paths.length; ++i) {\n            paths[i] = internals.path(settings.relativeTo, paths[i], template);\n        }\n    }\n\n    Items.serial(paths, (path, nextFile) => {\n\n        Fs.stat(path, (err, stats) => {\n\n            if (!err &&\n                stats.isFile()) {\n\n                return next(null, path);\n            }\n\n            return nextFile();\n        });\n    },\n    () => {\n\n        return next(Boom.badImplementation('View file not found: `' + template + '`. Locations searched: [' + paths.join(',') + ']'));\n    });\n};\n\n\ninternals.Manager.prototype._render = function (compiled, context, request, callback) {\n\n    if (this._context) {\n        let base = typeof this._context === 'function' ? this._context(request) : this._context;\n        if (context) {\n            base = Hoek.shallow(base);\n            const keys = Object.keys(context);\n            for (let i = 0; i < keys.length; ++i) {\n                const key = keys[i];\n                base[key] = context[key];\n            }\n        }\n\n        context = base;\n    }\n\n    context = context || {};\n\n    if (compiled.layout &&\n        context.hasOwnProperty(compiled.settings.layoutKeyword)) {\n\n        return callback(Boom.badImplementation('settings.layoutKeyword conflict', { context, keyword: compiled.settings.layoutKeyword }));\n    }\n\n    compiled.template(context, compiled.settings.runtimeOptions, (err, renderedContent) => {\n\n        if (err) {\n            return callback(Boom.badImplementation(err.message, err));\n        }\n\n        // No layout\n\n        if (!compiled.layout) {\n            return callback(null, renderedContent);\n        }\n\n        // With layout\n\n        context[compiled.settings.layoutKeyword] = renderedContent;\n        compiled.layout(context, compiled.settings.runtimeOptions, (err, renderedWithLayout) => {\n\n            delete context[compiled.settings.layoutKeyword];\n\n            if (err) {\n                return callback(Boom.badImplementation(err.message, err));\n            }\n\n            return callback(null, renderedWithLayout);\n        });\n    });\n};\n\n\ninternals.path = function (base, path, file) {\n\n    if (path &&\n        Path.isAbsolute(path)) {\n\n        return Path.join(path, file || '');\n    }\n\n    return Path.join(base || '', path || '', file || '');\n};\n\n\ninternals.Manager.prototype._compile = function (template, engine, settings, callback) {\n\n    if (engine.cache &&\n        engine.cache[template]) {\n\n        return callback(null, engine.cache[template]);\n    }\n\n    settings.compileOptions.filename = template;            // Pass the template to Jade via this copy of compileOptions\n\n    // Read file\n\n    Fs.readFile(template, { encoding: settings.encoding }, (err, data) => {\n\n        if (err) {\n            return callback(Boom.badImplementation('Failed to read view file: ' + template));\n        }\n\n        engine.compileFunc(data, settings.compileOptions, (err, compiled) => {\n\n            if (err) {\n                return callback(Boom.wrap(err));\n            }\n\n            if (engine.cache) {\n                engine.cache[template] = compiled;\n            }\n\n            return callback(null, compiled);\n        });\n    });\n};\n\n\ninternals.Manager.prototype._response = function (template, context, options, request) {\n\n    Joi.assert(options, internals.schema.viewOverride);\n\n    const source = { manager: this, template, context, options };\n    return request.generateResponse(source, { variety: 'view', marshal: internals.marshal, prepare: internals.prepare });\n};\n\n\ninternals.marshal = function (response, callback) {\n\n    const manager = response.source.manager;\n\n    manager._render(response.source.compiled, response.source.context, response.request, (err, rendered) => {\n\n        if (err) {\n            return callback(err);\n        }\n\n        const config = response.source.compiled.settings;\n\n        if (!response.headers['content-type']) {\n            response.type(config.contentType);\n        }\n\n        response.encoding(config.encoding);\n\n        return callback(null, rendered);\n    });\n};\n\ninternals.prepare = function (response, callback) {\n\n    const manager = response.source.manager;\n\n    manager._prepare(response.source.template, response.source.options, (err, compiled) => {\n\n        if (err) {\n            return callback(err);\n        }\n\n        response.source.compiled = compiled;\n        return callback(response);\n    });\n};\n\ninternals._wrapMethod = (bind, method, args) => {\n\n    return new Promise((resolve, reject) => {\n\n        const callback = function (err, result) {\n\n            if (err) {\n                return reject(err);\n            }\n\n            return resolve(result);\n        };\n\n        method.apply(bind, args.concat(callback));\n    });\n};\n"}